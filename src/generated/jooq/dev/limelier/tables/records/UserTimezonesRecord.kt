/*
 * This file is generated by jOOQ.
 */
package dev.limelier.tables.records


import dev.limelier.tables.UserTimezones

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserTimezonesRecord() : UpdatableRecordImpl<UserTimezonesRecord>(UserTimezones.USER_TIMEZONES), Record2<Long?, String?> {

    open var userId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var timezone: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, String?> = super.fieldsRow() as Row2<Long?, String?>
    override fun valuesRow(): Row2<Long?, String?> = super.valuesRow() as Row2<Long?, String?>
    override fun field1(): Field<Long?> = UserTimezones.USER_TIMEZONES.USER_ID
    override fun field2(): Field<String?> = UserTimezones.USER_TIMEZONES.TIMEZONE
    override fun component1(): Long? = userId
    override fun component2(): String? = timezone
    override fun value1(): Long? = userId
    override fun value2(): String? = timezone

    override fun value1(value: Long?): UserTimezonesRecord {
        this.userId = value
        return this
    }

    override fun value2(value: String?): UserTimezonesRecord {
        this.timezone = value
        return this
    }

    override fun values(value1: Long?, value2: String?): UserTimezonesRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised UserTimezonesRecord
     */
    constructor(userId: Long? = null, timezone: String? = null): this() {
        this.userId = userId
        this.timezone = timezone
    }
}
